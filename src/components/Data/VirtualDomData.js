const virtualDomData = {
   title: 'Виртуальный DOM',
   blockTexts: [
      {
         text: [
            'Виртуальный DOM (VDOM) — это концепция программирования, в которой «виртуальное» представление пользовательского интерфейса хранится в памяти и синхронизируется с «настоящим» DOM при помощи библиотеки, такой как ReactDOM. Этот процесс называется согласованием.',
            'DOM расшифровывается как Document Object Model (объектная модель документа). При каждом изменении UI (user interface), DOM также обновляется для отображения этих изменений. Частые манипуляции с DOM негативно влияют на производительность.',
            'DOM представляет собой древовидную структуру данных. Поэтому изменения и обновления самого DOM являются достаточно быстрыми. Но после изменения обновленный элемент и все его потомки (дочерние элементы) должны быть повторно отрисованы (отрендерены) для обновления UI приложения. Повторный рендеринг — очень медленный процесс. Таким образом, чем больше у нас компонентов UI, тем более дорогими с точки зрения производительности являются обновления DOM.',
            'Манипуляции с RDOM являются медленными. Манипуляции с VDOM намного быстрее, поскольку они не отображаются (отрисовываются) на экране.',
            'Когда в UI добавляются новые элементы, создается VDOM в виде дерева. Каждый элемент является узлом этого дерева. При изменении состояния любого элемента, создается новое дерево. Затем это новое дерево сравнивается (diffed) со старым.',
            'После этого вычисляется наиболее эффективный метод внесения изменений в RDOM. Цель данных вычислений состоит в минимизации количества операций, совершаемых с RDOM. Тем самым, уменьшаются накладные расходы, связанные с обновлением RDOM.',
            'После этого вычисляется разница между предыдущей и текущей версиями виртуального DOM-дерева. Затем все родительское поддерево подвергается повторному рендерингу для представления обновленного UI. Наконец, это обновленное дерево используется для обновления RDOM.',
            'В React каждая часть UI является компонентом и почти каждый компонент имеет состояние (state). При изменении состояния компонента, React обновляет VDOM. После обновления VDOM, React сравнивает его текущую версию с предыдущей. Этот процесс называется «поиском различий» (diffing).',
            'После обнаружения объектов, изменившихся в VDOM, React обновляет соответствующие объекты в RDOM. Это существенно повышает производительность по сравнению с прямыми манипуляциями DOM. Именно это делает React высокопроизводительной библиотекой JavaScript.',
         ],
         list: {
            head: 'React использует эвристический O(n) (линейный) алгоритм, основываясь на двух предположениях:',
            item: [
               'Два элемента разных типов приводят к построению разных деревьев',
               'Разработчик может обеспечить стабильность элементов между рендерингами посредством пропа key (ключ)',
            ],
         }
      },
      {
         subtitle: 'Иллюстрация работы Virtual DOM',
         image: 'https://res.cloudinary.com/practicaldev/image/fetch/s--QTSCuA7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yoe10he2fr738onc143.png',
      }
   ]
}


export default virtualDomData