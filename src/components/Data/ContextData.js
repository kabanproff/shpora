const contextData = {
	title: 'Контекст',
	blockTexts: [
		{
			subtitle: 'React.createContext',
			text: [
				'Контекст разработан для передачи данных, которые можно назвать «глобальными» для всего дерева React-компонентов и не прокидывая их через пропсы(например, текущий аутентифицированный пользователь, UI-тема или выбранный язык).',
			],
			code: `
const MyContext = React.createContext(defaultValue);
			`,
			list: {
				head: 'где:',
				item: ['defaultValue - дефолтное значение или объект для получения через контекст']
			}
		},
		{
			list: {
				head: 'Вызывая React.createContext мы получаем объект, который содержит два компонента:',
				item: [
					'Компонент Provider. Благодаря ему все дочерние компоненты могут получать значения, которые мы ему передаем.',
					'Компонент Consumer - это React-компонент, который подписывается на изменения контекста.',
				]
			}
		},
		{
			subtitle: 'Provider',
			text: [
				'Компонент Provider принимает проп value, который будет передан во все компоненты, использующие этот контекст и являющиеся потомками этого компонента Provider. Один Provider может быть связан с несколькими компонентами, потребляющими контекст. Так же компоненты Provider могут быть вложены друг в друга, переопределяя значение контекста глубже в дереве.',

			],
			code: `
<MyContext.Provider value={value}> </MyContext.Provider>
		`
		},
		{
			subtitle: 'Consumer',
			text: [
				'Consumer принимает функцию в качестве дочернего компонента. Эта функция принимает текущее значение контекста и возвращает React-компонент. Передаваемый аргумент value будет равен ближайшему (вверх по дереву) значению этого контекста, а именно пропу value компонента Provider. Если такого компонента Provider не существует, аргумент value будет равен значению defaultValue, которое было передано в createContext().',

			],
			code: `
<MyContext.Consumer>
	{value => /* отрендерить что-то, используя значение контекста */}
</MyContext.Consumer>
		`
		},
		{
			subtitle: 'useContext()',
			text: [
				'Хук useContext. Принимает один параметр - это объект контекста, получаемый при вызове React.createContext и возвращает текущее значение контекста для этого контекста.',
				'Текущее значение контекста определяется пропом value ближайшего MyContext.Provider над вызывающим компонентом в дереве.',
			],
			code: `
const value = useContext(MyContext);
			`
		},
		{
			text: [
				'Компонент, вызывающий useContext, всегда будет перерендериваться при изменении значения контекста. Если повторный рендер компонента затратен, вы можете оптимизировать его с помощью мемоизации.',
				'Есть внегласное правило - контекст лучше всего создавать в отдельном файле.'
			],
		},
	]
}


export default contextData